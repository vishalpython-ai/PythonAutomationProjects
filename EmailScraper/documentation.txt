gethub id:vishalpython-ai pw:EvaRam$2022 
================= Email & Phone Scraper - Documentation =================

SECTION 1: Modules and Their Purpose
-------------------------------------
1. os / pathlib
   - Used to handle file paths and directories in a cross-platform way.
   - pathlib.Path provides an object-oriented way to manage paths.
2. re
   - Regular expressions for pattern matching emails and phone numbers.
   - Allows validation and extraction of structured data.
3. openpyxl
   - Used to read/write Excel (.xlsx) files.
   - Facilitates storing scraped contacts in Excel format.
4. docx (python-docx)
   - Used to read/write Word (.docx) documents.
   - Allows output in a structured Word table.
5. reportlab
   - Used to generate PDF files.
   - Allows writing structured contact data into a PDF.
6. PyPDF2
   - Reads text content from existing PDF files.
   - Supports extraction of emails and phones from PDF input.

SECTION 2: Functions, Methods, and Properties
-----------------------------------------------
1. extract_from_pdf(file_path)
   - Uses PyPDF2.PdfReader to extract all text from the PDF.
2. extract_from_word(file_path)
   - Reads all paragraphs from a Word document using docx.Document.
3. extract_contacts(text)
   - Splits each line by comma to get Name, Email, Phone.
   - Uses regex to validate email and phone numbers.
4. save_to_text(contacts, filename)
   - Writes structured contacts in plain text format.
5. save_to_excel(contacts, filename)
   - Creates an Excel workbook, adds header row, and appends contacts.
6. save_to_word(contacts, filename)
   - Creates a Word document with a table for contacts.
   - Adds headings and rows dynamically.
7. save_to_pdf(contacts, filename)
   - Uses reportlab.canvas to create a PDF.
   - Writes headers and each contact in structured format.
8. Regex methods
   - fullmatch(): Checks if the entire string matches the pattern.
9. Path / mkdir
   - Path.mkdir(exist_ok=True) ensures output folder exists.

SECTION 3: Actual Code and Logic Explanation
----------------------------------------------
1. Reading input files:
   - A for-loop iterates through all files in the input folder.
   - We check the file extension to decide whether to read PDF or Word.
2. Extracting contacts:
   - Each line is split by ',' to separate Name, Email, Phone.
   - Regex validates email and phone before storing in contacts list.
3. Storage:
   - TXT: simple vertical text with headers.
   - Excel: header row, then append each contact.
   - Word: uses table to keep Name/Email/Phone structured.
   - PDF: writes line by line, with page handling.
4. Why certain structures were used:
   - List: We store contacts in a list for ordered processing.
   - Set (optional): Can remove duplicates, but if preserving all rows, use list.
   - For-loops: Iterates through files and lines, simple and readable.
   - Functions: Each logical part (read, extract, save) is modular for reusability.
5. Error handling (learning point):
   - Currently minimal, but you can add try-except when reading files.

SECTION 4: Important Notes for Learning
----------------------------------------
1. Modules:
   - openpyxl and docx are external libraries; must be installed via pip.
   - reportlab is used for PDF generation.
2. Regex:
   - Regular expressions are critical for pattern extraction.
   - Email and phone patterns can be adjusted to stricter or looser formats.
3. Data Types:
   - Contacts stored as tuples inside a list for immutability and easy iteration.
4. Classes/Methods:
   - PyPDF2.PdfReader: read PDF pages and extract text.
   - docx.Document: access paragraphs and tables in Word documents.
   - canvas.Canvas: create PDF output with custom text layout.
5. Learning takeaway:
   - Modular code (functions) increases readability and reusability.
   - Structured input (single row: Name, Email, Phone) simplifies extraction.
   - Outputting to multiple formats demonstrates real-world usability.
   - Understanding regex, lists, tuples, loops, and external libraries is key.
6. Optional improvements:
   - Add exception handling for missing files.
   - Automatically create input files for testing.
   - Implement GUI for user-friendly scraping.

=========================================================================
